/* Generated By:JavaCC: Do not edit this line. Analizador.java */
     public class Analizador implements AnalizadorConstants {
                        public static void main (String[] argum){
                                                       try{
                                                                                         Analizador an = new Analizador(System.in);
                                                                                         an.Lenguaje();
                                                                                         System.out.println("Analisis terminado.");
                                                                                         System.out.println("No se han hallado errores.");
                                                                         } catch(ParseException eSin){
                                                                                         System.out.println("Analisis suspendido.");
                                                                                         System.out.println("Hallado un error sintactico:");
                                                                                         System.out.println(eSin.getMessage());
                                                                         } catch(TokenMgrError eLex){
                                                                                         System.out.println("Analisis suspendido.");
                                                                                   System.out.println("Hallado un error lexicografico:");
                                                                                   System.out.println(eLex.getMessage());
                                                                         }
                                                }

/******************************************************************************/
/******************************** PRODUCCIONES ********************************/
/******************************************************************************/
/*                                >***********                                 /
/*                                  *********                                  /
/*                                   *******                                   /
/*                                    *****                                    /
/*                                     ***                                     /
/*                                      *                                     */
  static final public void Lenguaje() throws ParseException {
    jj_consume_token(1);
    jj_consume_token(ID);
    jj_consume_token(2);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
      case 10:
      case 11:
      case 21:
      case 22:
      case 23:
      case 24:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      P_Declarativa();
      jj_consume_token(3);
    }
    jj_consume_token(4);
    label_2:
    while (true) {
      P_Operativa();
      jj_consume_token(3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 19:
      case 20:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(5);
    jj_consume_token(6);
    jj_consume_token(0);
  }

/******************************************************************************/
/***************************** PARTE DECLARATIVA ******************************/
/******************************************************************************/
  static final public void P_Declarativa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case 21:
    case 22:
    case 23:
    case 24:
    case ID:
      SubPrg();
      break;
    case 7:
      Union();
      break;
    case 10:
      Variables();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Union() throws ParseException {
    jj_consume_token(7);
    jj_consume_token(ID);
    jj_consume_token(8);
    jj_consume_token(ID);
    jj_consume_token(2);
    TipoDato();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(9);
      jj_consume_token(ID);
      jj_consume_token(2);
      TipoDato();
    }
  }

  static final public void Variables() throws ParseException {
    jj_consume_token(10);
    jj_consume_token(ID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(9);
      jj_consume_token(ID);
    }
    jj_consume_token(2);
    TipoDato();
  }

  static final public void SubPrg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
    case 22:
    case 23:
    case 24:
    case ID:
      TipoDato();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(11);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      ListaArgs();
      jj_consume_token(3);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
      case 10:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      P_Declarativa_SubPrg();
      jj_consume_token(3);
    }
    jj_consume_token(4);
    P_Operativa_SubPrg();
    jj_consume_token(5);
  }

  static final public void ListaArgs() throws ParseException {
    jj_consume_token(12);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(ID);
    jj_consume_token(2);
    TipoDato();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(9);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(ID);
      jj_consume_token(2);
      TipoDato();
    }
    jj_consume_token(14);
  }

  static final public void P_Declarativa_SubPrg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      Union();
      break;
    case 10:
      Variables();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void P_Operativa_SubPrg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      Sent_Devolucion();
      label_7:
      while (true) {
        Sents_SubPrg();
        jj_consume_token(3);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
        case 19:
        case 20:
        case ID:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
      }
      break;
    case 16:
    case 19:
    case 20:
    case ID:
      label_8:
      while (true) {
        Sents_SubPrg();
        jj_consume_token(3);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
        case 19:
        case 20:
        case ID:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
      }
      Sent_Devolucion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 19:
      case 20:
      case ID:
        Devolucion_AlFinal_OR_EnMedio();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Devolucion_AlFinal_OR_EnMedio() throws ParseException {
    label_9:
    while (true) {
      Sents_SubPrg();
      jj_consume_token(3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 19:
      case 20:
      case ID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
    }
  }

  static final public void Sents_SubPrg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
      case 8:
      case 12:
        Sent_Llamada_Compleja_OR_Asignacion();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    case 16:
      Condicional();
      break;
    case 19:
      Sent_Lectura();
      break;
    case 20:
      Sent_Grabacion();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Sent_Devolucion() throws ParseException {
    jj_consume_token(15);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case ID:
    case CTE_Entera:
    case CTE_Real:
    case CTE_Logica:
    case CTE_Caracter:
      Expresion();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(3);
  }

/******************************************************************************/
/****************************** PARTE OPERATIVA *******************************/
/******************************************************************************/
  static final public void P_Operativa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
      case 8:
      case 12:
        Sent_Llamada_Compleja_OR_Asignacion();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    case 16:
      Condicional();
      break;
    case 19:
      Sent_Lectura();
      break;
    case 20:
      Sent_Grabacion();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Sent_Llamada_Compleja_OR_Asignacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      Expresion();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 9:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        jj_consume_token(9);
        Expresion();
      }
      jj_consume_token(14);
      break;
    case 6:
    case 8:
      Ref_Variable();
      jj_consume_token(8);
      Expresion();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Ref_Variable() throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(6);
      jj_consume_token(ID);
    }
  }

  static final public void Condicional() throws ParseException {
    jj_consume_token(16);
    Expresion();
    jj_consume_token(17);
    label_12:
    while (true) {
      P_Operativa();
      jj_consume_token(3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 19:
      case 20:
      case ID:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(18);
    jj_consume_token(17);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 19:
      case 20:
      case ID:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
      P_Operativa();
      jj_consume_token(3);
    }
    jj_consume_token(18);
  }

  static final public void Sent_Lectura() throws ParseException {
    jj_consume_token(19);
    jj_consume_token(12);
    jj_consume_token(ID);
    Ref_Variable();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_14;
      }
      jj_consume_token(9);
      jj_consume_token(ID);
      Ref_Variable();
    }
    jj_consume_token(14);
  }

  static final public void Sent_Grabacion() throws ParseException {
    jj_consume_token(20);
    jj_consume_token(12);
    Expresion();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_15;
      }
      jj_consume_token(9);
      Expresion();
    }
    jj_consume_token(14);
  }

  static final public void TipoDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case 21:
      jj_consume_token(21);
      break;
    case 22:
      jj_consume_token(22);
      break;
    case 23:
      jj_consume_token(23);
      break;
    case 24:
      jj_consume_token(24);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expresion() throws ParseException {
    ExpresionSimple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
    case 31:
    case 32:
    case 33:
      OpCom();
      ExpresionSimple();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static final public void ExpresionSimple() throws ParseException {
    Termino();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
      case 29:
      case 30:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_16;
      }
      OpAdi();
      Termino();
    }
  }

  static final public void Termino() throws ParseException {
    Factor();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 26:
      case 27:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_17;
      }
      OpMul();
      Factor();
    }
  }

  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      Expresion();
      jj_consume_token(14);
      break;
    case ID:
      jj_consume_token(ID);
      Ref_Variable_OR_Sent_Llamada_Compleja();
      break;
    case CTE_Entera:
      jj_consume_token(CTE_Entera);
      break;
    case CTE_Real:
      jj_consume_token(CTE_Real);
      break;
    case CTE_Logica:
      jj_consume_token(CTE_Logica);
      break;
    case CTE_Caracter:
      jj_consume_token(CTE_Caracter);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Ref_Variable_OR_Sent_Llamada_Compleja() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      Expresion();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 9:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_18;
        }
        jj_consume_token(9);
        Expresion();
      }
      jj_consume_token(14);
      break;
    default:
      jj_la1[35] = jj_gen;
      Ref_Variable();
    }
  }

  static final public void OpMul() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      break;
    case 26:
      jj_consume_token(26);
      break;
    case 27:
      jj_consume_token(27);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OpAdi() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      break;
    case 29:
      jj_consume_token(29);
      break;
    case 30:
      jj_consume_token(30);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OpCom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      break;
    case 32:
      jj_consume_token(32);
      break;
    case 33:
      jj_consume_token(33);
      break;
    case 8:
      jj_consume_token(8);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e00c80,0x190000,0x1e00c80,0x200,0x200,0x1e00000,0x1000,0x480,0x2000,0x200,0x2000,0x480,0x190000,0x190000,0x190000,0x198000,0x190000,0x1140,0x190000,0x1000,0x1140,0x190000,0x200,0x1140,0x40,0x190000,0x190000,0x200,0x200,0x1e00000,0x80000100,0x70000000,0xe000000,0x1000,0x200,0x1000,0xe000000,0x70000000,0x80000100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x10,0x10,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x10,0x10,0x10,0x0,0x10,0x1f0,0x0,0x10,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x10,0x3,0x0,0x0,0x1f0,0x0,0x0,0x0,0x0,0x3,};
   }

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                 }
